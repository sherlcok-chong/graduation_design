// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user (name, password, email)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Password, arg.Email)
	return err
}

const existEmail = `-- name: ExistEmail :one
select exists(select 1 from user where email = ?)
`

func (q *Queries) ExistEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, name, email, password, sign, gender, birthday
from user
where name = ?
limit 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Sign,
		&i.Gender,
		&i.Birthday,
	)
	return i, err
}
