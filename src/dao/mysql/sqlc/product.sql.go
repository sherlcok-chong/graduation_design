// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: product.sql

package db

import (
	"context"
)

const createNewMediaProduct = `-- name: CreateNewMediaProduct :exec
INSERT INTO commodity_media (commodity_id, file_id)
VALUES (?, ?)
`

type CreateNewMediaProductParams struct {
	CommodityID int64 `json:"commodity_id"`
	FileID      int64 `json:"file_id"`
}

func (q *Queries) CreateNewMediaProduct(ctx context.Context, arg CreateNewMediaProductParams) error {
	_, err := q.db.ExecContext(ctx, createNewMediaProduct, arg.CommodityID, arg.FileID)
	return err
}

const createProduct = `-- name: CreateProduct :exec
insert into commodity (user_id, price, texts, is_free, is_lend)
values (?, ?, ?, ?, ?)
`

type CreateProductParams struct {
	UserID int64  `json:"user_id"`
	Price  int32  `json:"price"`
	Texts  string `json:"texts"`
	IsFree bool   `json:"is_free"`
	IsLend bool   `json:"is_lend"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.UserID,
		arg.Price,
		arg.Texts,
		arg.IsFree,
		arg.IsLend,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
delete
from commodity
where id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getLastProductID = `-- name: GetLastProductID :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) GetLastProductID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastProductID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const getProductMedia = `-- name: GetProductMedia :one
select url
from file
where id = ?
`

func (q *Queries) GetProductMedia(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getProductMedia, id)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getProductMediaId = `-- name: GetProductMediaId :many
select file_id
from commodity_media
where commodity_id = ?
`

func (q *Queries) GetProductMediaId(ctx context.Context, commodityID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getProductMediaId, commodityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var file_id int64
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLendProduct = `-- name: GetUserLendProduct :many
select id, user_id, price, texts, is_free, is_lend
from commodity
where user_id = ?
  and is_lend = 1
`

func (q *Queries) GetUserLendProduct(ctx context.Context, userID int64) ([]Commodity, error) {
	rows, err := q.db.QueryContext(ctx, getUserLendProduct, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Commodity{}
	for rows.Next() {
		var i Commodity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Price,
			&i.Texts,
			&i.IsFree,
			&i.IsLend,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
