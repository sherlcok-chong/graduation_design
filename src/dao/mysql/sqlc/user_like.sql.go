// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_like.sql

package db

import (
	"context"
)

const checkUserLike = `-- name: CheckUserLike :one
select exists(select 1 from user_like where user_id = ? and product_id = ?)
`

type CheckUserLikeParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) CheckUserLike(ctx context.Context, arg CheckUserLikeParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserLike, arg.UserID, arg.ProductID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteLike = `-- name: DeleteLike :exec
delete
from user_like
where product_id = ?
`

func (q *Queries) DeleteLike(ctx context.Context, productID int64) error {
	_, err := q.db.ExecContext(ctx, deleteLike, productID)
	return err
}

const disLikeProduct = `-- name: DisLikeProduct :exec
delete
from user_like
where user_id = ?
  and product_id = ?
`

type DisLikeProductParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) DisLikeProduct(ctx context.Context, arg DisLikeProductParams) error {
	_, err := q.db.ExecContext(ctx, disLikeProduct, arg.UserID, arg.ProductID)
	return err
}

const getLikeList = `-- name: GetLikeList :many
select product_id
from user_like
where user_id = ?
`

func (q *Queries) GetLikeList(ctx context.Context, userID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getLikeList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var product_id int64
		if err := rows.Scan(&product_id); err != nil {
			return nil, err
		}
		items = append(items, product_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likeProduct = `-- name: LikeProduct :exec
insert into user_like (user_id, product_id)
VALUES (?, ?)
`

type LikeProductParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) LikeProduct(ctx context.Context, arg LikeProductParams) error {
	_, err := q.db.ExecContext(ctx, likeProduct, arg.UserID, arg.ProductID)
	return err
}
