// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tags.sql

package db

import (
	"context"
)

const createNewTagProduct = `-- name: CreateNewTagProduct :exec
INSERT INTO product_tags (product_id, tag_id)
VALUES (?, ?)
`

type CreateNewTagProductParams struct {
	ProductID int64 `json:"product_id"`
	TagID     int64 `json:"tag_id"`
}

func (q *Queries) CreateNewTagProduct(ctx context.Context, arg CreateNewTagProductParams) error {
	_, err := q.db.ExecContext(ctx, createNewTagProduct, arg.ProductID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :exec
insert into tags (tag_name)
VALUES (?)
`

func (q *Queries) CreateTag(ctx context.Context, tagName string) error {
	_, err := q.db.ExecContext(ctx, createTag, tagName)
	return err
}

const getLastTag = `-- name: GetLastTag :one
select LAST_INSERT_ID()
`

func (q *Queries) GetLastTag(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastTag)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const getProductTags = `-- name: GetProductTags :many
select tag_name
from tags
where tag_id in (select tag_id from product_tags where product_id = ?)
`

func (q *Queries) GetProductTags(ctx context.Context, productID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getProductTags, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag_name string
		if err := rows.Scan(&tag_name); err != nil {
			return nil, err
		}
		items = append(items, tag_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
