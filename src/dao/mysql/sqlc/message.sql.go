// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: message.sql

package db

import (
	"context"
	"time"
)

const createNewMessage = `-- name: CreateNewMessage :exec
insert into message (fid, tid, is_file, is_read, texts, createAt)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateNewMessageParams struct {
	Fid      int64     `json:"fid"`
	Tid      int64     `json:"tid"`
	IsFile   bool      `json:"is_file"`
	IsRead   bool      `json:"is_read"`
	Texts    string    `json:"texts"`
	Createat time.Time `json:"createat"`
}

func (q *Queries) CreateNewMessage(ctx context.Context, arg CreateNewMessageParams) error {
	_, err := q.db.ExecContext(ctx, createNewMessage,
		arg.Fid,
		arg.Tid,
		arg.IsFile,
		arg.IsRead,
		arg.Texts,
		arg.Createat,
	)
	return err
}

const getMessageByUserID = `-- name: GetMessageByUserID :many
select id, fid, tid, is_file, is_read, texts, createat
from message
where fid = ?
`

func (q *Queries) GetMessageByUserID(ctx context.Context, fid int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessageByUserID, fid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Fid,
			&i.Tid,
			&i.IsFile,
			&i.IsRead,
			&i.Texts,
			&i.Createat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotReadMsgByUserID = `-- name: GetNotReadMsgByUserID :many
select id, fid, tid, is_file, is_read, texts, createat
from message
where tid = ?
  and fid = ?
  and is_read = false
`

type GetNotReadMsgByUserIDParams struct {
	Tid int64 `json:"tid"`
	Fid int64 `json:"fid"`
}

func (q *Queries) GetNotReadMsgByUserID(ctx context.Context, arg GetNotReadMsgByUserIDParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getNotReadMsgByUserID, arg.Tid, arg.Fid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Fid,
			&i.Tid,
			&i.IsFile,
			&i.IsRead,
			&i.Texts,
			&i.Createat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWhoTalk = `-- name: GetUserWhoTalk :many
select distinct fid
from message
where tid = ?
`

func (q *Queries) GetUserWhoTalk(ctx context.Context, tid int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUserWhoTalk, tid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var fid int64
		if err := rows.Scan(&fid); err != nil {
			return nil, err
		}
		items = append(items, fid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readMessage = `-- name: ReadMessage :exec
update message
set is_read = true
where id = ?
`

func (q *Queries) ReadMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, readMessage, id)
	return err
}
