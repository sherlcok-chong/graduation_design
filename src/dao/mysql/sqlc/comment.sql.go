// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comment.sql

package db

import (
	"context"
)

const createCommentMedias = `-- name: CreateCommentMedias :exec
insert into comment_media (comment_id, file_id)
values (?, ?)
`

type CreateCommentMediasParams struct {
	CommentID int64 `json:"comment_id"`
	FileID    int64 `json:"file_id"`
}

func (q *Queries) CreateCommentMedias(ctx context.Context, arg CreateCommentMediasParams) error {
	_, err := q.db.ExecContext(ctx, createCommentMedias, arg.CommentID, arg.FileID)
	return err
}

const createNewComment = `-- name: CreateNewComment :exec
insert into comment (user_id, product_id, texts)
VALUES (?, ?, ?)
`

type CreateNewCommentParams struct {
	UserID    int64  `json:"user_id"`
	ProductID int64  `json:"product_id"`
	Texts     string `json:"texts"`
}

func (q *Queries) CreateNewComment(ctx context.Context, arg CreateNewCommentParams) error {
	_, err := q.db.ExecContext(ctx, createNewComment, arg.UserID, arg.ProductID, arg.Texts)
	return err
}

const deleteCommentID = `-- name: DeleteCommentID :exec
delete
from comment
where id = ?
`

func (q *Queries) DeleteCommentID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommentID, id)
	return err
}

const deleteCommentMedia = `-- name: DeleteCommentMedia :exec
delete
from comment_media
where comment_id = ?
`

func (q *Queries) DeleteCommentMedia(ctx context.Context, commentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommentMedia, commentID)
	return err
}

const getCommentMedia = `-- name: GetCommentMedia :many
select file_id
from comment_media
where comment_id = ?
`

func (q *Queries) GetCommentMedia(ctx context.Context, commentID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getCommentMedia, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var file_id int64
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentUser = `-- name: GetCommentUser :one
select user_id
from comment
where id = ?
`

func (q *Queries) GetCommentUser(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCommentUser, id)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getLastCommentID = `-- name: GetLastCommentID :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) GetLastCommentID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastCommentID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const getProductComment = `-- name: GetProductComment :many
select id, user_id, product_id, texts
from comment
where product_id = ?
`

func (q *Queries) GetProductComment(ctx context.Context, productID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getProductComment, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Texts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
